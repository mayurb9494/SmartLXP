{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.splitStyles = splitStyles;\n  /**\n   * Utility function to extract styles in separate objects\n   *\n   * @param styles The style object you want to filter\n   * @param filters The filters by which you want to split the styles\n   * @returns An array of filtered style objects:\n   * - The first style object contains the properties that didn't match any filter\n   * - After that there will be a style object for each filter you passed in the same order as the matching filters\n   * - A style property will exist in a single style object, the first filter it matched\n   */\n  function splitStyles(styles) {\n    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      filters[_key - 1] = arguments[_key];\n    }\n    if (process.env.NODE_ENV !== 'production' && filters.length === 0) {\n      console.error('No filters were passed when calling splitStyles');\n    }\n\n    // `Object.entries` will be used to iterate over the styles and `Object.fromEntries` will be called before returning\n    // Entries which match the given filters will be temporarily stored in `newStyles`\n    var newStyles = filters.map(() => []);\n\n    // Entries which match no filter\n    var rest = [];\n\n    // Iterate every style property\n    outer: for (var item of Object.entries(styles)) {\n      // Check each filter\n      for (var i = 0; i < filters.length; i++) {\n        // Check if filter matches\n        if (filters[i](item[0])) {\n          newStyles[i].push(item); // Push to temporary filtered entries array\n          continue outer; // Skip to checking next style property\n        }\n      }\n\n      // Adds to rest styles if not filtered\n      rest.push(item);\n    }\n\n    // Put unmatched styles in the beginning\n    newStyles.unshift(rest);\n\n    // Convert arrays of entries into objects\n    return newStyles.map(styles => Object.fromEntries(styles));\n  }\n});","lineCount":54,"map":[[7,2,22,0,"exports"],[7,9,22,0],[7,10,22,0,"splitStyles"],[7,21,22,0],[7,24,22,0,"splitStyles"],[7,35,22,0],[8,2,12,0],[9,0,13,0],[10,0,14,0],[11,0,15,0],[12,0,16,0],[13,0,17,0],[14,0,18,0],[15,0,19,0],[16,0,20,0],[17,0,21,0],[18,2,22,7],[18,11,22,16,"splitStyles"],[18,22,22,27,"splitStyles"],[18,23,23,2,"styles"],[18,29,23,19],[18,31,25,2],[19,4,25,2],[19,13,25,2,"_len"],[19,17,25,2],[19,20,25,2,"arguments"],[19,29,25,2],[19,30,25,2,"length"],[19,36,25,2],[19,38,24,5,"filters"],[19,45,24,12],[19,52,24,12,"Array"],[19,57,24,12],[19,58,24,12,"_len"],[19,62,24,12],[19,69,24,12,"_len"],[19,73,24,12],[19,84,24,12,"_key"],[19,88,24,12],[19,94,24,12,"_key"],[19,98,24,12],[19,101,24,12,"_len"],[19,105,24,12],[19,107,24,12,"_key"],[19,111,24,12],[20,6,24,5,"filters"],[20,13,24,12],[20,14,24,12,"_key"],[20,18,24,12],[20,26,24,12,"arguments"],[20,35,24,12],[20,36,24,12,"_key"],[20,40,24,12],[21,4,24,12],[22,4,26,2],[22,8,26,6,"process"],[22,15,26,13],[22,16,26,14,"env"],[22,19,26,17],[22,20,26,18,"NODE_ENV"],[22,28,26,26],[22,33,26,31],[22,45,26,43],[22,49,26,47,"filters"],[22,56,26,54],[22,57,26,55,"length"],[22,63,26,61],[22,68,26,66],[22,69,26,67],[22,71,26,69],[23,6,27,4,"console"],[23,13,27,11],[23,14,27,12,"error"],[23,19,27,17],[23,20,27,18],[23,69,27,67],[23,70,27,68],[24,4,28,2],[26,4,30,2],[27,4,31,2],[28,4,32,2],[28,8,32,8,"newStyles"],[28,17,32,17],[28,20,32,20,"filters"],[28,27,32,27],[28,28,32,28,"map"],[28,31,32,31],[28,32,32,32],[28,38,32,38],[28,40,32,51],[28,41,32,52],[30,4,34,2],[31,4,35,2],[31,8,35,8,"rest"],[31,12,35,21],[31,15,35,24],[31,17,35,26],[33,4,37,2],[34,4,38,2,"outer"],[34,9,38,7],[34,11,38,9],[34,16,38,14],[34,20,38,20,"item"],[34,24,38,24],[34,28,38,28,"Object"],[34,34,38,34],[34,35,38,35,"entries"],[34,42,38,42],[34,43,38,43,"styles"],[34,49,38,49],[34,50,38,50],[34,52,38,63],[35,6,39,4],[36,6,40,4],[36,11,40,9],[36,15,40,13,"i"],[36,16,40,14],[36,19,40,17],[36,20,40,18],[36,22,40,20,"i"],[36,23,40,21],[36,26,40,24,"filters"],[36,33,40,31],[36,34,40,32,"length"],[36,40,40,38],[36,42,40,40,"i"],[36,43,40,41],[36,45,40,43],[36,47,40,45],[37,8,41,6],[38,8,42,6],[38,12,42,10,"filters"],[38,19,42,17],[38,20,42,18,"i"],[38,21,42,19],[38,22,42,20],[38,23,42,21,"item"],[38,27,42,25],[38,28,42,26],[38,29,42,27],[38,30,42,28],[38,31,42,29],[38,33,42,31],[39,10,43,8,"newStyles"],[39,19,43,17],[39,20,43,18,"i"],[39,21,43,19],[39,22,43,20],[39,23,43,21,"push"],[39,27,43,25],[39,28,43,26,"item"],[39,32,43,30],[39,33,43,31],[39,34,43,32],[39,35,43,33],[40,10,44,8],[40,19,44,17,"outer"],[40,24,44,22],[40,25,44,23],[40,26,44,24],[41,8,45,6],[42,6,46,4],[44,6,48,4],[45,6,49,4,"rest"],[45,10,49,8],[45,11,49,9,"push"],[45,15,49,13],[45,16,49,14,"item"],[45,20,49,18],[45,21,49,19],[46,4,50,2],[48,4,52,2],[49,4,53,2,"newStyles"],[49,13,53,11],[49,14,53,12,"unshift"],[49,21,53,19],[49,22,53,20,"rest"],[49,26,53,24],[49,27,53,25],[51,4,55,2],[52,4,56,2],[52,11,56,9,"newStyles"],[52,20,56,18],[52,21,56,19,"map"],[52,24,56,22],[52,25,56,24,"styles"],[52,31,56,30],[52,35,56,35,"Object"],[52,41,56,41],[52,42,56,42,"fromEntries"],[52,53,56,53],[52,54,56,54,"styles"],[52,60,56,60],[52,61,56,61],[52,62,56,62],[53,2,60,0],[54,0,60,1],[54,3]],"functionMap":{"names":["<global>","splitStyles","filters.map$argument_0","newStyles.map$argument_0"],"mappings":"AAA;OCqB;gCCU,mBD;uBEwB,sCF;CDI"},"hasCjsExports":false},"type":"js/module"}]}